#!/usr/bin/env python3

import sys
import os
import re
import getopt

# Global options.
verbose = False  # Display extra output.
recursive = True  # Process directories recursively.
force = False  # Don't ask for any confirmation. (Dangerous, but won't
# overwrite existing files.
ignorecase = False  # Ignore case in regular expressions?


def main():
    args = parse_options(sys.argv[1:])

    if not len(args) == 3:
        print("Syntax error.")
        usage()
        sys.exit(2)

    # The base directory.
    b = args[0]
    if not os.path.exists(b):
        sys.stderr.write("Directory " + b + " does not exist.\n")
        sys.exit(1)

    # The episode pattern and the replacement test
    if ignorecase:
        p = re.compile(args[1], re.I)
    else:
        p = re.compile(args[1])
    r = args[2]

    # The actual stuff!
    mass_rename(b, p, r)


def usage():
    print("""Usage:  massrename [options] <directory> <pattern> <replacement>

  Massrename renames all files in <directory> that match the regular expression
  <pattern> using the substitution string <replacement>. The substitution string
  can contain \\1, \\2, ... if there are corresponding groups in the pattern.

  Options:
  -h  Show this help text.
  -v  Display verbose output.
  -i  Ignore case in regular expression.
  -r  Recursive mode.
  -f  Force mode: does not ask for confirmation before renaming.
  -r  Recursive mode
  """)


def parse_options(args):
    # Access global variables.
    global verbose, recursive, force, ignorecase

    try:
        opts, args = getopt.getopt(args, "hvrfi")
    except getopt.GetoptError as err:
        print(str(err))
        usage()
        sys.exit(2)

    # Defaults
    verbose = False
    recursive = False

    for o, _ in opts:
        if o == "-h":
            usage()
            sys.exit()
        elif o == "-v":
            verbose = True
        elif o == "-r":
            recursive = True
        elif o == "-f":
            force = True
        elif o == "-i":
            ignorecase = True
        else:
            assert False, "unhandled option"

    return args


def mass_rename(b, p, r):
    # Parameters:
    # b - base directory
    # p - regular expression to match
    # r - replacement text

    # Create a set of the files to process.
    debug("Getting contents of directory " + b)
    dirs = os.listdir(b)
    dirs.sort()
    d = set(dirs)

    # The dictionary where we put the files to rename.
    dd = {}

    # A flag indicating if at least one match was found.
    anymatch = False

    # For each of the files in the set:
    # if it matches the pattern
    #   - remove it from the set
    #   - add it to renaming dict, put new name if new name is not in set
    #   - put new name in set
    # else
    #   - don't do anything.

    for f in dirs:
        # If recursive mode: If we've encountered a directory, proceed into it.
        if recursive and os.path.isdir(os.path.join(b, f)):
            subdir = os.path.join(b, f)
            debug("Entering directory " + subdir)
            mass_rename(subdir, p, r)

        # In recursive mode, after a directory has been recursively processed, we
        # are free to rename it if it is a match itself.
        if p.match(f):
            debug("Match found: " + f)
            anymatch = True

            # Create the new name.
            n = p.sub(r, f)

            # Remove element from the set (we will re-add it if it could not be renamed)
            d.remove(f)

            # If there already exists an object with the intendent new name, we cannot
            # rename it and put it back.
            if n in d:
                debug(
                    "Sorry, file with name " + n + " already exists. Will not rename."
                )
                d.add(f)
            else:
                # Now that we have verified that we can use the new name, we put the old
                # and the new names in the dictionary, which we will use in the end to do
                # the actual renaming.
                dd[f] = n

                # Also, we add the new name to the set so that future files will not be
                # renamed to the same.
                d.add(n)

        else:
            debug("No match: " + f)

    # For now, let's just print the renaming that we will do.
    preview(dd)

    if not anymatch:
        print("No match found in directory ", b)
    elif (not force) and not confirm(prompt="Go ahead?", resp=False):
        print("Aborted.")
        return

    # Now we can do the actual renaming.
    do_rename(b, dd)


def sorted_keys(dict):
    keys = dict.keys()
    keys.sort()
    return keys


def confirm(prompt=None, resp=False):
    """prompts for yes or no response from the user. Returns True for yes and
    False for no.

    'resp' should be set to the default value assumed by the caller when
    user simply types ENTER.

    >>> confirm(prompt='Create Directory?', resp=True)
    Create Directory? [y]|n:
    True
    >>> confirm(prompt='Create Directory?', resp=False)
    Create Directory? [n]|y:
    False
    >>> confirm(prompt='Create Directory?', resp=False)
    Create Directory? [n]|y: y
    True

    """

    if prompt is None:
        prompt = "Confirm"

    if resp:
        prompt = "%s [%s]|%s: " % (prompt, "y", "n")
    else:
        prompt = "%s [%s]|%s: " % (prompt, "n", "y")

    while True:
        ans = input(prompt)
        if not ans:
            return resp
        if ans not in ["y", "Y", "n", "N"]:
            print("Please enter y or n.")
            continue
        if ans == "y" or ans == "Y":
            return True
        if ans == "n" or ans == "N":
            return False


def debug(str):
    if verbose:
        sys.stderr.write(str + "\n")


def preview(dict):
    for k in sorted_keys(dict):
        print(k, "\n  -> ", dict[k])


def do_rename(b, dict):
    for f in sorted_keys(dict):
        old = os.path.join(b, f)
        new = os.path.join(b, dict[f])
        debug("Renaming " + old + " -> " + new)

        # If the old and the new name are the same, no need to rename anything.
        if old == new:
            debug(old + " already has the correct name.")
            continue

        # Last safety check
        if os.path.exists(new):
            print("BAD BAD BAD! I almost tried to erase the existing file ", new, ".")
            sys.exit(1)

        os.rename(old, new)


if __name__ == "__main__":
    main()
